desc:MIDI Auto-up-downer
//tags: MIDI processing

slider1:80<0,127,1>Velocity range
slider2:0.5<0.5,2,0.5>Cycle duration (beats)
slider3:0.1<0,1,0.05>Offbeat detection tolerance
slider4:1<0,1,1>Constant root note

in_pin:none
out_pin:none

@init
// this is a memory address location
// access by mem[0], mem[1], etc
mem = 0;

@block
arrlen = 0;
noteon_count = 0;
lowest_pitch = 129;
next_lowest_pitch = 129;
highest_pitch = -1;

while (
  // for each MIDI event...
  midirecv(offset, msg1, msg23) ? (
    eventtype = msg1 >> 4;
    vel = (msg23/256)|0;
    pitch = msg23&127;

    // if event type is NOTE ON
    eventtype == 9 ? (
      // store to array
      mem[arrlen * 3] = offset;
      mem[arrlen * 3 + 1] = msg1;
      mem[arrlen * 3 + 2] = msg23;
      arrlen += 1;

      // record the pitch
      pitch>=highest_pitch ? (
        highest_pitch = pitch;
      );
      pitch<=lowest_pitch ? (
        next_lowest_pitch = lowest_pitch;
        lowest_pitch = pitch;
      ) : (
        pitch<=next_lowest_pitch ? next_lowest_pitch = pitch;
      );
    ) : (
      // not NOTE ON, passthrough
      midisend(offset, msg1, msg23);
    );

    1; // Always return positive from midirecv(), otherwise the loop will end as soon as eventtype!=9
  );
);

i = 0;

arrlen >= 3 ? (
  // there are at least 3 NOTE ONs

  slider4 ? (
    mid_pitch = (next_lowest_pitch + highest_pitch) / 2;
    pitch_range = highest_pitch - next_lowest_pitch;
  ) : (
    mid_pitch = (lowest_pitch + highest_pitch) / 2;
    pitch_range = highest_pitch - lowest_pitch;
  );

  loop (arrlen,
    // retrieve midi event from memory
    offset = mem[i * 3];
    msg1 = mem[i * 3 + 1];
    msg23 = mem[i * 3 + 2];

    // extract information
    vel = msg23 >> 8;
    pitch = msg23 & 127;

    slider4 && pitch==lowest_pitch ? (
      // this is root note, pass through
      midisend(offset, msg1, msg23);
    ) : (
      beat_offset = beat_position - slider2 * 2 * floor(beat_position / slider2 / 2);
      // ideally this should be:
      //   beat_offset>=(slider2*1) && beat_offset<(slider2*2)
      // but due to floating point errors / beat_position being imprecise...
      // we use numbers slightly smaller than 1 and 2 to account for the impreciseness
      is_offbeat = beat_offset>=(slider2*(1-slider3)) && beat_offset<(slider2*(2-slider3));

      delta_vel = (pitch - mid_pitch) / pitch_range * slider1;

      is_offbeat ? new_vel = vel - delta_vel : new_vel = vel + delta_vel;

      new_vel = min(max(new_vel, 0), 127);

      midisend(offset, msg1, pitch + (new_vel << 8));
    );

    i += 1;
  );
) : (
  // less than 3 NOTE ONs, just pass through
  loop (arrlen,
    // retrieve midi event from memory
    offset = mem[i * 3];
    msg1 = mem[i * 3 + 1];
    msg23 = mem[i * 3 + 2];

    midisend(offset, msg1, msg23);

    i += 1;
  );
);
